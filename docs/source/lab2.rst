Л.р №2 Построение информационно-логической и функциональной моделей системы (DFD)
===================================================================================


.. |pic1| image:: _static/Pictures/Лр2/р1.jpg
       :scale: 100 %


.. |pic2| image:: _static/Pictures/Лр2/р2.jpg
       :scale: 100 %
              

.. |pic3| image:: _static/Pictures/Лр2/р3.jpg
       :scale: 100 %
        

.. |pic4| image:: _static/Pictures/Лр2/р4.jpg
       :scale: 100 % 
            

.. |pic5| image:: _static/Pictures/Лр2/р5.jpg
       :scale: 100 % 
          

.. |pic6| image:: _static/Pictures/Лр2/р6.jpg
       :scale: 100 % 
            

.. |pic7| image:: _static/Pictures/Лр2/р7.jpg
       :scale: 100 % 
           

Цель работы: получить навыки функционального описания процессов с помощью формальных методов с графической нотацией.


Методические указания
----------------------

В данной работе рассматриваются типовые методы построения функцио-нальных моделей, используемые в функционально-ориентированных методоло-гиях проектирования информационных систем (ИС). Достоинством функцио-нально-ориентированных методологий является реализация структурного подхода к проектированию ИС «сверху-вниз», когда каждый функциональный блок может быть декомпозирован на множество подфункций и т.д. Для таких моделей ха-рактерна строгость декомпозиции и наглядность графического представления. Проектирование при использовании функционально-ориентированной методо-логии начинается с построения функциональных моделей (схем).
В функциональной модели главными структурными компонентами явля-ются функции (операции, работы, действия), которые связываются между собой потоками информационных и материальных объектов.

DFD
___

Метод DFD (Data Flow Diagrams — диаграммы потоков данных) получил популярность как структурное средство для разработки проектов ИС. Аналогично IDEF0, диаграммы потоков данных (Data Flow Diagrams — DFD) позволяют мо-делировать систему как набор функций (действий, операций и т.п.), соединенных стрелками. Диаграммы потоков данных могут быть использованы в сочетании с IDEF0, но при этом обеспечивают возможность одновременного проектирования функций и данных.

Для метода DFD, модель системы — это иерархия диаграмм потоков данных, описывающих асинхронный процесс преобразования информации от ее ввода в систему до выдачи пользователю. Диаграммы верхних уровней иерархии — контекстные диаграммы (КД) — определяют основные функции, или подсистемы ИС с внешними входами и выходами. КД детализируются при помощи диаграмм нижних уровней.
Имеется два основных варианта DFD: метод Гейна-Сарсона (Gane-Sarson) и метод Йордана-Де Марко (Yourdon-DeMarco). Нотации этих методов различаются.

В DFD имеются два типа элементов, не имеющих аналогов в IDEF0. Это накопители данных — объекты, в которые собирается и в которых хранится ин-формация, и внешние сущности — объекты, с помощью которых моделируется взаимодействие с частями системы, выходящими за границы моделирования, или с другими системами.


Описание элементов DFD-диаграмм
________________________________


Основными элементами DFD являются:

- внешние сущности;

- системы и подсистемы;

- процессы;

- накопители (хранилища) данных (data store);

- потоки данных.

Внешняя сущность — материальный предмет или физическое лицо, представляющее собой источник или приемник информации. Внешняя сущность находится за пределами анализируемой части системы (или системы целиком).

В процессе анализа некоторые внешние сущности могут переноситься внутрь диаграммы анализируемой системы. Или, наоборот, часть процессов ИС может переноситься за границы моделирования и представляться как внешние сущности.

Система и подсистема. При построении модели сложной ИС она может быть представлена в общем виде на так называемой контекстной диаграмме в виде одного блока (т.е. системы), либо декомпозирована на ряд подсистем. 

Система и подсистема — это частный случай процесса.

Наименование системы и подсистемы представляет собой существительное или некоторое предложение с подлежащим.

Процесс. Под процессом понимается преобразование входных потоков данных в выходные в соответствии с определенным алгоритмом. Физически процесс может реализовываться посредством персонала организации, аппаратуры, программы и т.п.

Наименование процесса: активный глагол в неопределенной форме, за ко-торым следует дополнение в виде существительного в винительном падеже («вычислить квадратный корень» и т.п.).

Накопитель данных — абстрактное устройство для хранения информа-ции. Накопитель данных часто является прообразом будущей БД.

Наименование накопителя данных представляет собой существительное.

Поток данных — информация, передаваемая от источника к приемнику по некоторому каналу (соединению).

В зависимости от нотации, элементы DFD могут обозначаться по-разному.


.. csv-table:: Элементы DFD
   :header: "Элемент", "Нотация Гейна-Сарсона", "Нотация Йордана-Де Марко"
   :widths: 10, 10, 10
   :align: center

   "Внешняя сущность", |pic1| , |pic2|

   "Процесс", |pic3| , |pic4|

   "Накопитель данных", |pic5| , |pic6|

   "Поток данных", |pic7| , |pic7|


Потоки могут быть двунаправленными:

.. figure:: _static/Pictures/Лр2/р8.jpg
    :scale: 100%
    :align: center



Потоки данных могут разбиваться (разветвляться) и соединяться. При разбиении каждая новая ветвь может быть переименована. Таким образом, обес-печивается возможность декомпозиции данных.

.. figure:: _static/Pictures/Лр2/р9.jpg
    :scale: 100%
    :align: center



Построение моделей DFD
_______________________


В самом общем случае, порядок построения иерархии DFD следующий:

1.	Создание контекстной диаграммы; обычно для простой ИС строится одна диаграмма со звездообразной топологией: центр звезды — система, углы — внешние сущности.


2.	Детализация системы и процессов. При этом должно соблюдаться пра-вило балансировки: на диаграмме детализации могут указываться только те ис-точники и приемники информации, которые показаны для детализируемой си-стемы (процесса). Правило нумерации процессов: номер имеет вид типа X.Y, где Y — порядковый номер процесса, детализирующего процесс X.


3.	Завершение детализации. Детализация процесса не выполняется в сле-дующих случаях:

 - небольшое число входных и выходных потоков данных (2-3 потока);

 - можно описать процесс преобразования данных последовательным алгоритмом;

 - преобразование входной информации в выходную описывается един-ственной логической функцией;

 - можно описать логику процесса с помощью так называемой миниспе-цификации; миниспецификация — это текст объемом 20-30 на естественном языке, в котором  четко определяется функция преобразования.

4.	Верификация (проверка на корректность). Должно выполняться правило сохранения информации: все поступающие данные должны быть считаны, все считываемые — записаны.

Внешние сущности и накопители данных также обычно нумеруются. Номер накопителя данных состоит из префикса D (Data store) и уникального порядкового номера накопителя во всей модели DFD. Номер внешней сущности состоит из префикса E (External entity) и ее уникального порядкового номера в модели.

Применение DFD предполагает, что структура потоков данных и накопи-телей данных должна быть описана отдельно. Диаграммы потоков данных обес-печивают удобный инструмент описания функционирования компонентов си-стемы, но не позволяют указать, какая именно информация преобразуется про-цессами и как она преобразуется. Для решения первой задачи предназначены текстовые средства, служащие для описания структуры преобразуемой инфор-мации и получившие название словарей данных. Словарь данных представляет собой определенным образом организованный список всех элементов данных системы с их точными определениями, что дает возможность различным кате-гориям пользователей (от системного аналитика до программиста) иметь общее понимание всех входных и выходных потоков и компонентов накопителей. Для решения второй задачи используются миниспецификации.

При построении диаграмм DFD полезно придерживаться следующих принципов:

 - размещать на одной диаграмме 3-7 процессов (меньше 3 — мало-осмысленная детализация, больше 7 — излишне сложная схема);
 
 - декомпозировать потоки совместно с детализацией процессов;
 
 - давать емкие и недвусмысленные наименования, избегать сокращений и аббревиатур;
 
 - при наличии вариантов возможных декомпозиций выбирать самый простой. 



_______________________________________________________________________________________________________________________________________

При построении диаграмм DFD часто удобно придерживаться такой по-следовательности действий:

1.	Разложить множество требований в крупные группы по функциональ-ному признаку, получить в результате основные функциональные группы.

2.	Выявить все важные внешние объекты.

3.	Определить основные виды передаваемой информации.

4.	Разработать предварительную контекстную диаграмму (КД). Основные функциональные группы станут процессами, внешние объекты — внешними сущностями, основные виды информации — потоками данных.

5.	Изучить предварительную КД, внести требуемые изменения.

6.	Построить КД путем объединения всех процессов предварительной диаграммы в один процесс, который станет системой, и группирования потоков данных.

7.	Сформировать диаграмму первого уровня детализации на базе процес-сов предварительной КД.

8.	Проверить корректность DFD первого уровня.

9.	(Иерархический спуск сверху вниз) Описать каждый процесс текущей диаграммы с помощью детализирующей диаграммы или миниспецификации.

10.	Параллельно с детализацией процессов выполнить декомпозицию по-токов, занести определения новых потоков в словарь данных.

11.	Проверить соблюдения основных требований для текущей диаграммы.

12.	Писать миниспецификацию в тех случаях, если функцию сложно или невозможно выразить через комбинацию процессов.


Пример использования DFD
________________________


Пусть разрабатывается несложная ИС для обеспечения работы пункта проката видеокассет. Назначение ИС: ведение БД постоянных клиентов, учет видеокассет, аренды видеокассет, поставщиков. ИС должна генерировать регла-ментированные отчеты по запросу руководства. 

Особенности предметной области. Если арендатор просрочил сдачу ви-деокассеты, то новые ему не выдаются до погашения задолженности. Если арендатор является постоянным клиентом, то он имеет право на скидки. У по-стоянного клиента имеется членская карточка.

С учетом указанных сведений, контекстная диаграмма может иметь вид:



.. figure:: _static/Pictures/Лр2/р10.jpg
    :scale: 100%
    :align: center


Диаграмма декомпозиции получается в результате разбиения системы «Библиотека» на подсистемы и детализации потоков данных. Следует обратить внимание, что одна и та же внешняя для системы сущность «Руководитель» по-казана дважды. Такой прием позволяет уменьшить число пересечений и длину стрелок.


.. figure:: _static/Pictures/Лр2/р11.jpg
    :scale: 100%
    :align: center
















































