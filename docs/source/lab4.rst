Л.р №4 Моделирование с помощью UML
==================================

Цель работы: получить навыки спецификации функциональных требований с помощью прецедентов использования и описания объектной структуры предметной области с помощью диаграмм классов.


Методические указания
----------------------


Основное содержание процесса проектирования с использованием UML
____________________________________________________________________


UML — это язык построения графических диаграмм, описывающих взаимодействие как естественных, так и искусственных элементов (артефактов). Соответственно, UML сам по себе не задает методологии и технологии проектирования, хотя в значительной степени предопределяет их. UML также не привязан к какому-либо объектно-ориентированному языку программирования и может поддерживать любой из них. 

Последовательность и содержание этапов при проектировании ИС в рамках объектно-ориентрованного подхода следующие:

- анализ требований, или точное определение требований к ИС, во время которого определяются основные выполняемые системой действия с внешней точки зрения (обычно с точки зрения пользователей);

- объектно-ориентированный анализ предметной области, в результате которого определяется состав и назначение элементов предметной области, их взаимоотношения;

- объектно-ориентированное проектирование — определение состава, структуры, назначения и взаимодействия программных и аппаратных элементов, образующих ИС, удовлетворяющую изложенным требованиям.

На каждом этапе для формализации промежуточных и конечных результатов используются различные типы диаграмм, поддерживаемых UML. Все диаграммы и спецификации, определенные на каждом этапе, взаимосогласованны и в большей или меньшей степени зависят друг от друга, задавая, таким образом, некоторое частное представление общей модели проектируемой ИС.

Совокупности UML-диаграмм определенного типа задают основные виды на всю архитектуру ИС:

- вид с точки зрения прецедентов использования, или вариантов использования (use case view), описывает поведение системы, наблюдаемое конечными пользователями, аналитиками и тестировщиками; этот вид специфицирует не истинную организацию программной системы, а выполняемые системой функции;

- вид с точки зрения проектирования (design view) описывает классы, интерфейсы и их взаимоотношения, что составляет словарь предметной области и ИС; данный вид содержит как статические (классы), так и динамические (взаимоотношения) составляющие;

- вид с точки зрения процессов (process view) охватывает нити управления и процессы, т.е. описывает параллелизм и синхронизацию действий в ИС;

- вид с точки зрения реализации (implementation view) охватывает компоненты и файлы, используемые для сборки конечного программного продукта; этот вид предназначен в первую очередь для управления конфигурацией версий системы, составляемых компонентов и файлов, которые могут по-разному объединяться между собой;

- вид с точки зрения развертывания (deployment view) охватывает аппаратуру ИС и физическое размещение программных компонент ИС.

Перечисленные виды обеспечивают взаимопонимание между разработчиками ИС, выполняющими разные функции, поскольку виды взаимосвязаны и отражают какой-то аспект единой модели ИС.


Основные элементы UML
______________________


Язык UML состоит из трех видов элементов:

 1)	сущности;

 2)	отношения;

 3)	диаграммы.

Сущности — это некоторые абстрактные объекты. Сущности являются основными элементами UML.

Связи  между сущностями выражаются отношениями.

Диаграмма — это группа взаимосвязанных сущностей, характеризующих один из аспектов предметной области.

Если проводить параллели с естественным языком, то сущности — это существительные, пассивная составляющая, а отношения — глаголы, активные элементы.

Типы сущностей:

 1)	структурные;

 2)	поведенческие;

 3)	группирующие;

 4)	аннотационные.

Структурные сущности соответствуют концептуальным или физическим элементам системы.

Существует шесть разновидностей структурных сущностей:

1.	Класс (class) — описание совокупности объектов с общими атрибутами, методами, отношениями и семантикой. Данная абстракция соответствует понятию «класс» в языках программирования. 

Обозначение:

.. figure:: _static/Pictures/Лр4/р1.jpg
    :scale: 80%
    :align: center


В верхней части прямоугольника записывается наименование класса, в средней перечисляются атрибуты, в нижней — методы (операции). Для атрибутов могут указываться тип и видимость. Для методов могут указываться видимость и тип возвращаемого значения. Видимость и типы соответствуют общепринятым в языках C++, Java, Ada. В зависимости от назначения модели, класс может отображаться с той или иной степени детальности, например, может указываться только наименование.


2.	Интерфейс (interface) — описание совокупности методов, которые определяют набор услуг, предоставляемых классом или компонентом (см. ниже). 

Обозначение:

.. figure:: _static/Pictures/Лр4/р2.jpg
    :scale: 80%
    :align: center

Интерфейс описывает «видимое» извне поведение элемента через спецификацию операций. Интерфейс содержит только декларативную часть, реализация методов заключена в классе или компоненте, на которые он ссылается.

3.	Кооперация, или сотрудничество (collaboration), — совокупность классов, интерфейсов и других элементов, эффект от работы которых не сводится к сумме простых слагаемых. 

Обозначение:

.. figure:: _static/Pictures/Лр4/р3.jpg
    :scale: 80%
    :align: center


Кооперация специфицирует, как некий элемент реализуется с помощью совокупности других элементов. Чаще всего кооперация используется для описания реализации прецедента. Следует также отметить, что элементы могут участвовать в нескольких кооперациях.

4.	Прецедент (use case) — описание последовательности выполняемых системой действий (в том числе вариантных), которые приводят к наблюдаемому результату, значимому для какого-либо пользователя системы (актера). 

Обозначение:

.. figure:: _static/Pictures/Лр4/р4.jpg
    :scale: 80%
    :align: center

Прецеденты реализуются посредством кооперации.

5.	Компонент (component) — физическая заменяемая часть системы, которой соответствует некоторому набору интерфейсов и обеспечивает их реализацию. Компонент — это «обертка» для классов, компонентов, коопераций. 

Обозначение:

.. figure:: _static/Pictures/Лр4/р5.jpg
    :scale: 80%
    :align: center


6.	Узел (node) —это элемент реальной системы. Это вычислительный элемент, который обладает машинной памятью некоторого объема и, обычно, способностью обработки.


.. figure:: _static/Pictures/Лр4/р6.jpg
    :scale: 80%
    :align: center


Поведенческие сущности
++++++++++++++++++++++++

1.	Взаимодействие (interaction) — поведение, состоящее в обмене сообщениями между объектами в рамках конкретного контекста для достижения определенной цели. Отдельное сообщение обозначается как:


.. figure:: _static/Pictures/Лр4/р7.jpg
    :scale: 80%
    :align: center

Здесь «2» — порядковый номер, «СозданиеСтроки()» — сообщение, стрелка определяет направление передачи сообщения и линия обозначает связь.


2.	Автомат (state machine) — алгоритм поведения, определяющий последовательность состояний, через которые проходят объект или взаимодействие. Автомат определяется через диаграмму состояний. Отдельное состояние обозначается прямоугольником со скругленными углами:

.. figure:: _static/Pictures/Лр4/р8.jpg
    :scale: 80%
    :align: center

Или:

.. figure:: _static/Pictures/Лр4/р9.jpg
    :scale: 80%
    :align: center


Группирующие сущности
+++++++++++++++++++++++


Включают только одну разновидность — пакет.

Пакет (package) — механизм организации элементов в группы. Пакеты существуют только во время разработки модели, в отличие от компонентов, которые тоже выполняют функции агрегации элементов.

.. figure:: _static/Pictures/Лр4/р10.jpg
    :scale: 80%
    :align: center


В пакет могут входить классы, интерфейсы, компоненты, узлы, кооперации, другие пакеты и даже диаграммы. Элемент может принадлежать только одному пакету. 

Аннотационные сущности
+++++++++++++++++++++++

Также только одна разновидность — примечание (note). Используется для словесного описания чего-либо на диаграмме. Обозначается прямоугольником с загнутым правым верхним углом:


.. figure:: _static/Pictures/Лр4/р11.jpg
    :scale: 80%
    :align: center


Пример использования:

.. figure:: _static/Pictures/Лр4/р12.jpg
    :scale: 80%
    :align: center



Среди сущностей языка UML выделяют так называемые классификаторы. Классификаторы — это элементы, которые могут иметь экземпляры, т.е. реализации с конкретными характеристиками. Классификаторы характеризуются как структурными (состав атрибутов), так и поведенческими (состав операций) свойствами. Все экземпляры одного классификатора обладают рядом общих свойств.
Основные классификаторы:

- класс;

- интерфейс;

- компонент;

- узел;

- прецедент;

- актер.

Отношения:
++++++++++


1.	Зависимость (dependency) — семантическое отношение; показывает, что изменение спецификации независимой (или целевой) сущности влияет на зависимую, при этом обратное в общем случае неверно. Зависимость часто применяется  для обозначения использования методами класса методов другого класса. Например, если в реализации класса Б используется операция А1 класса А, то зависимость Б от А обозначается следующим образом:


.. figure:: _static/Pictures/Лр4/р13.jpg
    :scale: 80%
    :align: center


Зависимость показывается пунктирной стрелкой, направленной к независимой сущности (поэтому также называемой целевой).

2.	Ассоциация (association) — структурное отношение, рассматривается ниже при описании диаграммы классов; в общем случае обозначается линией.

3.	Обобщение (generalization) — структурное отношение типа «наследование», т.е. показывает, что объект-потомок наследует структуру и поведение родителя. Примеры:

.. figure:: _static/Pictures/Лр4/р14.jpg
    :scale: 80%
    :align: center

.. figure:: _static/Pictures/Лр4/р15.jpg
    :scale: 80%
    :align: center


Обобщение показывается стрелкой с незаштрихованным наконечником, направленной от потомка в сторону родительской сущности.

4.	Реализация (realization) — семантическое отношение, показывающее такую зависимость, когда один из элементов определяет запрос, а другой обеспечивает его выполнение, например: интерфейс и класс, прецедент и кооперация. Если класс «Строка» реализует интерфейс «Сравнение строк», то это обозначается так:


.. figure:: _static/Pictures/Лр4/р16.jpg
    :scale: 80%
    :align: center


Реализация указывается пунктирной стрелкой с незаштрихованным наконечником, направленной от реализующего элемента к определяющему запрос элементу.


Типичные приемы моделирования с помощью основных видов диаграмм
________________________________________________________________


Диаграмма — это группа взаимосвязанных элементов, характеризующих один из аспектов предметной области.

UML включает с себя несколько основных типов диаграмм, последовательное построение которых позволяет получить целостное описание разрабатываемой ИС и ее отдельных частей.

Диаграммы прецедентов
++++++++++++++++++++++


Диаграммы прецедентов используются для моделирования динамических аспектов ИС. Диаграммы этого типа позволяют достаточно четко описать и визуализировать поведение системы или ее части с точки зрения способа их использования. В результате, с одной стороны, пользователи системы понимают, как использовать некоторые элементы, а разработчики — как их реализовать. Диаграммы данного типа облегчают понимание системы и ее частей, представляя взгляд извне на то, как данные элементы могут быть использованы в соответствующем контексте. При этом достигается высокий уровень понимания функционирования всей системы в целом. Кроме того, такие диаграммы важны для организации эффективного тестирования систем в процессе прямого проектирования и для понимания их внутреннего устройства при обратном проектировании, когда создается модель уже работающей системы. Поэтому диаграммы прецедентов являются наиболее важным инструментом описания поведения.


На диаграмме прецедентов показывается совокупность прецедентов (use cases), актеров (actors) и отношений между этими элементами. Отношения могут следующих типов: зависимость, обобщение, ассоциация. Диаграмма 
прецедентов может быть также использована для описания функциональности любого классификатора (classifier).

Актер (actor) — согласованная совокупность ролей, которые играет пользователь системы при взаимодействии с ней. Актером может быть как одушевленный предмет (человек-оператор), так и не одушевленный (другие ИС). 

Актер обычно представляется как стилизованным человечком:


.. figure:: _static/Pictures/Лр4/р17.jpg
    :scale: 80%
    :align: center


Актеры позволяют четко определить:

- кто пользуется системой;

- кто отвечает за сопровождение системы;

- внешнее аппаратное обеспечение, которое используется системой;

- другие системы, которые должны взаимодействовать с данной системой.

Можно указать два основных варианта использования диаграмм прецедентов:

1.	моделирование контекста системы, в ходе которого формируется воображаемая граница системы и выявляются актеры, взаимодействующие с системой; диаграмма прецедентов позволяет в данном случае определить актеров и суть их ролей;

2.	моделирование требований к системе, позволяющее точно определить функции системы и ее реакции на внешние события независимо от того, как эти функции реализуются, т.е. по принципу «черного ящика»; это описание системы с точки зрения внешнего наблюдателя.

Пример описания процесса выполнения заказа клиента с помощью диаграммы прецедентов:


.. figure:: _static/Pictures/Лр4/р18.jpg
    :scale: 80%
    :align: center


Здесь два актера — «Менеджер по продажам» и «Менеджер по закупкам» — вовлечены в два прецедента — «Выполнить заказ клиента» и «Заключить договор с клиентом». Отношения между актерами и прецедентами носят характер однонаправленной ассоциации и показаны поименованной стрелкой.

Один актер может участвовать в нескольких прецедентах, а с одним прецедентом может быть связано несколько актеров.

Несколько прецедентов могут иметь общую часть, выделяемую в самостоятельный прецедент, с которым устанавливается отношение включения с помощью стереотипа «include». Например, если прецеденты «Выполнить заказ клиента» и «Заключить договор с клиентом» содержат общую часть, выражающуюся в проверке данных о клиенте, то это можно выразить так:


.. figure:: _static/Pictures/Лр4/р19.jpg
    :scale: 80%
    :align: center

Содержание прецедента с точки зрения действий, из которых он состоит, может быть раскрыто с помощью диаграмм активности или состояний, присоединенных к прецеденту.

Диаграммы классов
+++++++++++++++++


Диаграмма классов — это граф, узлами которого являются элементы статической структуры проекта системы (классы, интерфейсы и т.п.), а дугами — отношения между узлами (ассоциации, наследование, зависимости). 

Диаграмма классов основана на распространенной модели «сущность-связь» (Entity Relationship Diagram, ERD), но обычно обладает большими возможностями по спецификации свойств сущностей и их отношений. Диаграммы классов являются основным средством моделирования статического вида системы.

Обычно диаграммы классов используют в следующих целях:

1.	моделирование словаря предметной области, в ходе которого определяется состав и назначение абстракций, являющихся частью системы;

2.	моделирование коопераций, позволяющее визуализировать и специфицировать отношения между элементами, входящими в кооперацию;

3.	моделирование логической схемы базы данных (реляционной или объектно-ориентированной).

На диаграмме классов обычно изображаются следующие элементы:

- класс (class);

- интерфейс (interface);

- объект (object) — экземпляр класса;

- параметризованный класс (parameterized class), или шаблон, — семейство классов, отличающихся значением некоторых формальных параметров (пример из языков программирования — шаблоны (templates) в C++);

- пакет (package);

- ассоциация (association);

- наследование (inheritance);

- зависимость (dependency).

Среди перечисленных элементов ранее не давалось развернутое описание отношения типа «ассоциация»

Ассоциация (association) — структурное отношение, показывающее, что объекты одного типа некоторым образом связаны с объектами другого типа. Ассоциация может связывать любые классификаторы, но главным образом используется для описания отношений между классами.

Ассоциация, связывающая два класса, называется бинарной. Такая ассоциация используется чаще всего, и именно она рассматривается далее. Можно создавать ассоциации, связывающие более двух классов, они называются n-арными. Реально использование такого отношения редко бывает необходимым. Можно также указывать ассоциацию класса самим с собой, что означает структурную связь между объектами одного класса.

Бинарная ассоциация изображается сплошной линией и может иметь дополнительные визуальные атрибуты, конкретизирующие свойства ассоциации.

Четыре основные характеристики ассоциации:

- наименование — символьная строка, описывающая смысл отношения; имя обычно не указывается, но является полезным, например, в случае существования нескольких ассоциаций между одними и теми же классами;

- роль — описание того значения, которое имеет некоторый класс в контексте данной ассоциации; роль описывает значение одного класса относительно другого класса, связанного ассоциацией;

- кратность — описание числа объектов (экземпляров класса), которые могут быть связаны одним экземпляром ассоциации; указание кратности на одном конце ассоциации специфицирует, сколько именно объектов должно соответствовать каждому объекту на противоположном конце; кратность может указываться конкретным числом или диапазоном, например: единица — «1», несколько — «0..*», положительное количество — «1..*» и т.п.;

- агрегирование — знак того, что ассоциация имеет характер отношения «часть-целое», когда один класс в той или иной форме является частью другого; факт агрегирования показывается с помощью незакрашенного ромба со стороны класса более высокого ранга («целого»); базовая форма агрегирования является чисто концептуальной и показывает, что объект одного класса может агрегироваться объектом другого класса или даже несколькими объектами, что, например, не задает каких-либо зависимостей по времени жизни между объектами.

Пример изображения того, что класс «Студент», играющий роль ученика, ассоциирован с классом «Преподаватель», играющим роль учителя:


.. figure:: _static/Pictures/Лр4/р20.jpg
    :scale: 80%
    :align: center


При этом считается, что одному объекту «Преподаватель» может соответствовать произвольное количество объектов «Студент». Имя ассоциации составлено со стороны класса «Студент».

Пример использования агрегирования:

.. figure:: _static/Pictures/Лр4/р21.jpg
    :scale: 80%
    :align: center


Теперь, возвращаясь к примеру о выполнении заказа клиента, можно представить возможную диаграмму классов, использующихся для реализации данного прецедента, следующим образом:


.. figure:: _static/Pictures/Лр4/р22.jpg
    :scale: 80%
    :align: center

Из диаграммы видно, что для некоторых классов определены операции, перечисляемые в нижней части прямоугольника класса. Для атрибутов определен тип.

Для атрибутов и классов может быть указана видимость:

.. figure:: _static/Pictures/Лр4/р23.jpg
    :scale: 80%
    :align: center

Закрытые (protected) атрибуты и операции помечаются знаком «-» (минус), защищенные (protected) — знаком «#» (диез), открытые — знаком «+» (плюс).

Диаграммы сотрудничества
+++++++++++++++++++++++++


Диаграмма сотрудничества (collaboration diagram) — это вид диаграммы взаимодействия, в котором основное внимание сосредоточено на структуре взаимосвязей объектов, принимающих и отправляющих сообщения.

Диаграмма сотрудничества представляет собой граф, вершинами которого являются объекты, а ребрами — связи. Связи именуются сообщениями, которые объекты посылают и принимают. Диаграмма сотрудничества иллюстрирует 
поток управления с точки зрения структуры взаимодействия объектов. Пример диаграммы сотрудничества:


.. figure:: _static/Pictures/Лр4/р24.jpg
    :scale: 80%
    :align: center


Следует обратить внимание, что на диаграмме сотрудничества показываются не классы, а объекты, то есть конкретные экземпляры классов. Объект именуется как «Наименование объекта: Наименование класса». Элемент с наименованием «:Запас» является объектом класса «Заказ», но наименование собственно объекта не указано, так как не является важным для данного примера. 

Сообщения имеют порядковый номер для указания временной последовательности сообщений. Для каждой связи можно показать несколько сообщений, и каждое из них должно иметь уникальный номер. Для описания вложенных сообщений используется иерархическая нумерация. Например: номер 2.1 имеет первое сообщение, вложенное в сообщение 2.

Сообщение удобно рассматривать как вызов некоторого метода. Например, из рисунка следует, что объект «:Строка заказа» вызывает метод АнализЗапаса() объекта «:Запас». Для вызывающего (объект-клиент) и вызываемого объекта (объект-сервер) можно указать видимость (глобальная, локальная, вызываемый объект является частью вызывающего и т.д.). Видимость описывается через стереотип связи. Например, если объект «:Строка заказа» является глобальным для «:Запас», то это может быть показано так:


.. figure:: _static/Pictures/Лр4/р25.jpg
    :scale: 80%
    :align: center

С помощью диаграмм сотрудничества можно моделировать не только неветвящиеся потоки управления, но и сложные потоки с ветвлениями и итерациями (циклами).


Диаграммы последовательности действий
+++++++++++++++++++++++++++++++++++++


Диаграмма последовательности действий (sequence diagram) — это вид диаграммы взаимодействия, в котором внимание акцентируется на временной упорядоченности сообщений во времени. С помощью диаграмм последовательности действий удобно моделировать простые потоки управления, не содержащие сложных ветвлений и циклов. 

В случае разработки сложной системы необходимо точно представлять взаимодействие объектов между собой, перечень клиентов и серверов и порядок обмена сообщений между ними. Обмен сообщениями происходит в определенной последовательности, и диаграммы последовательности действий позволяют получить отражение этого обмена во времени.

В течение работы сложной системы объекты, являющиеся клиентами, посылают друг другу различные сообщения, а объекты, являющиеся серверами, обрабатывают их. В простейшем случае можно рассматривать сообщение как вызов метода какого-либо класса, в более сложных случаях сервер имеет обработчик очереди сообщений, и сообщения обрабатываются им асинхронно, т.е. сервер накапливает несколько сообщений в очереди, если не может обработать их сразу.

Если не пользоваться сложной нотацией, то на одной диаграмме последовательности можно показать только один поток управления (или один сценарий). Поэтому обычно создают несколько диаграмм, одни из которых описывают основной поток, а другие — дополнительные варианты и работу в исключительных ситуациях.

Диаграмма последовательности действий имеет табличную структуру. Вверху слева направо показываются взаимодействующие объекты, сообщения показываются как стрелки, соединяющие между собой так называемые линии жизни объектов. Чем ниже стрелка сообщения, тем позднее оно посылается. Линия жизни обозначается вертикальной пунктирной прямой и указывает, что в заданный момент взаимодействия объект существует. Активность объекта в некоторый момент времени показывается на линии жизни с помощью фокуса управления — узкого вертикального прямоугольника.

Существует взаимно однозначное отображение между диаграммой последовательности действий и диаграммой сотрудничества. Пример диаграммы последовательности для части ранее использованной диаграммы сотрудничества:


.. figure:: _static/Pictures/Лр4/р26.jpg
    :scale: 80%
    :align: center


Целесообразно стараться создавать простые диаграммы взаимодействия, акцентирующие внимание только на каком-то одном аспекте динамики системы.

Диаграммы состояний
++++++++++++++++++++

Диаграмма состояний (statechart diagram) используется для описания эволюции объектов со сложным поведением. Диаграмма представляет собой граф, вершины которого — состояния объекты, дуги — переходы между состояниями. 

Переход может помечаться вызывающим переход событием, условием выполнения, выполняемым действием. 

Таким образом, диаграмма состояния показывает автомат. С помощью диаграмм состояний можно описывать как автомат Мили, так и автомат Мура. Разновидностью диаграммы состояний является диаграмма деятельности (activity diagram), в которой состояния — это некоторые работы, а переходы соответствуют завершению работы в исходном состоянии и, возможно, выполнению некоторых условий.

С помощью диаграмм состояний можно визуализировать, специфицировать и документировать динамику экземпляров классов, прецедентов и системы в целом. Обычно автомат строится только для объектов со сложным поведением.

Пример диаграммы активности, иллюстрирующей поведение объекта (экземпляра) класса «Строка заказа»:


.. figure:: _static/Pictures/Лр4/р27.jpg
    :scale: 80%
    :align: center


Особым образом указываются начальное и конечное состояния. Если диаграмма описывает непрерывно работающий автомат, то конечное состояние может отсутствовать.

Переходы помечаются в соответствии со шаблоном:

«Событие»(«аргументы») [«условие»] / «Действие» ^ «Отправляемое сообщение»(«аргументы»)

В данном примере события и отправляемые сообщения не имеют аргументов.

Диаграммы состояний поддерживают вложенность, т.е. можно моделировать подсостояния в пределах некоторого состояния.

Процесс построения полезной диаграммы состояний может состоять из следующих шагов:

•	выбор конечного и начального состояния объекта;

•	определение устойчивых состояний объекта, т.е. таких, в которых он может находиться неопределенно долгое время;

•	определение допустимых состояний объекта;

•	определение подсостояний для некоторых важных состояний;

•	выявление событий, инициирующих переходы между состояниями;

•	спецификация переходов;

•	проверка достижимости всех состояний и отсутствия тупиковых состояний;

•	упрощение графа за счет реорганизации с помощью подсостояний, ветвлений, слияний и т.п.;

•	трассировка автомата для проверки согласованности его поведения с ожидаемым.


Диаграммы деятельности
++++++++++++++++++++++

Диаграмма деятельности является разновидностью диаграммы состояний и показывает поток управления как переход от одной деятельности (работы) к другой, в то время как диаграмма состояний изображает поток управления от состояния к состоянию.

Узел графа диаграммы соответствует деятельности (activity), или работе. Деятельность — это продолжительное по времени неатомарное вычисление. Деятельность в конечном итоге выражается в выполнении некоторого действия 
(action). Действие состоит из атомарных вычислений и может заключаться в вызове операции, посылке сообщения, некотором простом вычислении и т.п. Состояние деятельности может иметь присоединенный подавтомат, в котором работа раскладывается на более мелкие действия.

Ребрами графа диаграммы являются переходы, показывающие путь из одного состояния в другое. Как и для диаграмм состояний, для перехода могут быть указаны событие, условие, выполняемое действие. Поэтому можно описать поведение объекта однозначным образом как с помощью диаграммы состояния, так и с помощью диаграммы деятельности.

Разделение и слияние параллельных потоков управления отображается с помощью толстых горизонтальных линий. В точку разделения потоков может входить только один поток, из точки слияния может выходить только один. 

Каждый из параллельных потоков представляет собой независимый поток управления.

На диаграммах деятельности можно явным образом показывать ветвление — точку выбора варианта дальнейшего развития потока управления. В точку ветвления, обозначаемую ромбом, может входить один переход, а выходить два или более. В зависимости от выполнения условий, ассоциированных с ветвлением, будет выбран какой-то один выходной переход.

Пример диаграммы деятельности для прецедента «Выполнить заказ клиента»:


.. figure:: _static/Pictures/Лр4/р28.jpg
    :scale: 80%
    :align: center


Диаграммы деятельности обычно применяются для решения следующих двух задач.

•	Моделирование делового процесса. При этом внимание фокусируется на работе с точки зрения актеров, работающих с системой. Процессы показываются с внешней, видимой для пользователей стороны ИС, и используются для визуализации, определения и документирования деловых процессов, обеспечиваемых ИС.

•	Моделирование операций. В этом случае диаграмма деятельности является, по сути, привычной блок-схемой потока управления вычислениями. Внимание фокусируется на точках разделения и слияния, ветвления, вызываемых операциях и их параметрах, используемых объектах.

Процесс построения диаграммы деятельности сходен с процедурой создания диаграммы состояний. Разница заключается в том, что узлами графа являются действия (работы).

Диаграммы компонентов
++++++++++++++++++++++


Компонент — это физическая заменяемая часть системы, соответствующая некоторому набору интерфейсов и обеспечивающая их реализацию.

Диаграммы компонентов используются при физическом проектировании ИС и предназначены для описания распределения классов и других элементов по компонентам и взаимоотношений между компонентами. Иначе говоря, диаграммы компонентов описывают структуру программного кода. Данный тип диаграмм можно рассматривать как аналог диаграмм модулей, используемых в структурном программировании.

Пример:

.. figure:: _static/Pictures/Лр4/р29.jpg
    :scale: 80%
    :align: center












































